{"ast":null,"code":"// ./src/azure-cognitiveservices-computervision.js\n// Azure SDK client libraries\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\nimport { ApiKeyCredentials } from '@azure/ms-rest-js'; // List of sample images to use in demo\n\nimport RandomImageUrl from './DefaultImages';\n\nconst fs = require('fs');\n\nconst https = require('https');\n\nconst path = require(\"path\");\n\nconst createReadStream = require('fs').createReadStream; // Authentication requirements\n\n\nconst key = '35074228b393450690d5c9a4ac95c12b';\nconst endpoint = 'https://fhlcomputervison.cognitiveservices.azure.com/';\nconsole.log(`key = ${key}`);\nconsole.log(`endpoint = ${endpoint}`); // Cognitive service features\n\nconst visualFeatures = [\"ImageType\", \"Faces\", \"Adult\", \"Categories\", \"Color\", \"Tags\", \"Description\", \"Objects\", \"Brands\"];\nexport const isConfigured = () => {\n  const result = key && endpoint && key.length > 0 && endpoint.length > 0 ? true : false;\n  console.log(`key = ${key}`);\n  console.log(`endpoint = ${endpoint}`);\n  console.log(`ComputerVision isConfigured = ${result}`);\n  return result;\n}; // Computer Vision detected Printed Text\n\nconst includesText = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"text\";\n  });\n}; // Computer Vision detected Handwriting\n\n\nconst includesHandwriting = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"handwriting\";\n  });\n}; // Wait for text detection to succeed\n\n\nconst wait = timeout => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}; // Analyze Image from URL\n\n\nexport const computerVision = async url => {\n  // authenticate to Azure service\n  const computerVisionClient = new ComputerVisionClient(new ApiKeyCredentials({\n    inHeader: {\n      'Ocp-Apim-Subscription-Key': key\n    }\n  }), endpoint); // get image URL - entered in form or random from Default Images\n\n  const urlToAnalyze = url || RandomImageUrl(); // analyze image\n\n  const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, {\n    visualFeatures\n  }); // text detected - what does it say and where is it\n\n  if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\n    analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze);\n  } // all information about image\n\n\n  return {\n    \"URL\": urlToAnalyze,\n    ...analysis\n  };\n}; // analyze text in image\n\nconst readTextFromURL = async (client, url) => {\n  var _result;\n\n  const streamResponse = await client.readInStream(() => createReadStream(url)).then(response => {\n    return response;\n  });\n  console.log();\n  const operationLocationLocal = streamResponse.operationLocation;\n  const operationIdLocal = operationLocationLocal.substring(operationLocationLocal.lastIndexOf('/') + 1);\n\n  while (true) {\n    const readOpResult = await client.getReadResult(operationIdLocal).then(result => {\n      return result.analyzeResult;\n    });\n    console.log('Read status: ' + readOpResult.status);\n\n    if (readOpResult.status === STATUS_FAILED) {\n      console.log('The Read File operation has failed.');\n      break;\n    }\n\n    if (readOpResult.status === STATUS_SUCCEEDED) {\n      console.log('The Read File operation was a success.');\n      console.log();\n      console.log('Read File local image result:');\n\n      for (const textRecResult of readOpResult.analyzeResult.readResults) {\n        for (const line of textRecResult.lines) {\n          if (regex.test(line.text)) {\n            urlList.push(line.text);\n          } else {\n            nonUrlList.push(line.text);\n          }\n        }\n      }\n\n      console.log(\"Urls in the text\");\n      urlList.forEach(function (entry) {\n        console.log(entry);\n      });\n      console.log(\"\\n\");\n      console.log(\"Text in the images\");\n      nonUrlList.forEach(function (entry) {\n        console.log(entry);\n      });\n      break;\n    }\n\n    await sleep(1000);\n  }\n\n  let result = await client.read(url);\n  let operationID = result.operationLocation.split('/').slice(-1)[0]; // Wait for read recognition to complete\n  // result.status is initially undefined, since it's the result of read\n\n  const start = Date.now();\n  console.log(`${start} -${(_result = result) === null || _result === void 0 ? void 0 : _result.status} `);\n\n  while (result.status !== \"succeeded\") {\n    var _result2;\n\n    await wait(500);\n    console.log(`${Date.now() - start} -${(_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.status} `);\n    result = await client.getReadResult(operationID);\n  } // Return the first page of result. \n  // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\n\n\n  return result.analyzeResult;\n};","map":{"version":3,"sources":["C:/Users/ankusin.FAREAST/source/repos/JavaScript_end_to_end_client_analyze_image_with_Cognitive_Services/src/azure-cognitiveservices-computervision.js"],"names":["ComputerVisionClient","ApiKeyCredentials","RandomImageUrl","fs","require","https","path","createReadStream","key","endpoint","console","log","visualFeatures","isConfigured","result","length","includesText","tags","filter","el","name","toLowerCase","includesHandwriting","wait","timeout","Promise","resolve","setTimeout","computerVision","url","computerVisionClient","inHeader","urlToAnalyze","analysis","analyzeImage","text","readTextFromURL","client","streamResponse","readInStream","then","response","operationLocationLocal","operationLocation","operationIdLocal","substring","lastIndexOf","readOpResult","getReadResult","analyzeResult","status","STATUS_FAILED","STATUS_SUCCEEDED","textRecResult","readResults","line","lines","regex","test","urlList","push","nonUrlList","forEach","entry","sleep","read","operationID","split","slice","start","Date","now"],"mappings":"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","sourcesContent":["// ./src/azure-cognitiveservices-computervision.js\r\n\r\n// Azure SDK client libraries\r\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\r\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\r\n\r\n// List of sample images to use in demo\r\nimport RandomImageUrl from './DefaultImages';\r\nconst fs = require('fs');\r\nconst https = require('https');\r\nconst path = require(\"path\");\r\nconst createReadStream = require('fs').createReadStream;\r\n// Authentication requirements\r\nconst key = '35074228b393450690d5c9a4ac95c12b';\r\nconst endpoint = 'https://fhlcomputervison.cognitiveservices.azure.com/';\r\n\r\nconsole.log(`key = ${key}`)\r\nconsole.log(`endpoint = ${endpoint}`)\r\n\r\n// Cognitive service features\r\nconst visualFeatures = [\r\n    \"ImageType\",\r\n    \"Faces\",\r\n    \"Adult\",\r\n    \"Categories\",\r\n    \"Color\",\r\n    \"Tags\",\r\n    \"Description\",\r\n    \"Objects\",\r\n    \"Brands\"\r\n];\r\n\r\nexport const isConfigured = () => {\r\n    const result = (key && endpoint && (key.length > 0) && (endpoint.length > 0)) ? true : false;\r\n    console.log(`key = ${key}`)\r\n    console.log(`endpoint = ${endpoint}`)\r\n    console.log(`ComputerVision isConfigured = ${result}`)\r\n    return result;\r\n}\r\n\r\n// Computer Vision detected Printed Text\r\nconst includesText = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"text\";\r\n    });\r\n}\r\n// Computer Vision detected Handwriting\r\nconst includesHandwriting = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"handwriting\";\r\n    });\r\n}\r\n// Wait for text detection to succeed\r\nconst wait = (timeout) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, timeout);\r\n    });\r\n}\r\n\r\n// Analyze Image from URL\r\nexport const computerVision = async (url) => {\r\n\r\n    // authenticate to Azure service\r\n    const computerVisionClient = new ComputerVisionClient(\r\n        new ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint);\r\n\r\n    // get image URL - entered in form or random from Default Images\r\n    const urlToAnalyze = url || RandomImageUrl();\r\n    \r\n    // analyze image\r\n    const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, { visualFeatures });\r\n\r\n    // text detected - what does it say and where is it\r\n    if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\r\n        analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze);\r\n    }\r\n\r\n    // all information about image\r\n    return { \"URL\": urlToAnalyze, ...analysis};\r\n}\r\n// analyze text in image\r\nconst readTextFromURL = async (client, url) => {\r\n    \r\n\r\n    const streamResponse = await client.readInStream(() => createReadStream(url))\r\n    .then((response) => {\r\n      return response;\r\n    });\r\n    console.log();\r\n  \r\n    const operationLocationLocal = streamResponse.operationLocation\r\n    const operationIdLocal = operationLocationLocal.substring(operationLocationLocal.lastIndexOf('/') + 1);\r\n    \r\n    while (true) {\r\n        const readOpResult = await client.getReadResult(operationIdLocal)\r\n          .then((result) => {\r\n            return result.analyzeResult;\r\n          })\r\n        console.log('Read status: ' + readOpResult.status)\r\n        if (readOpResult.status === STATUS_FAILED) {\r\n          console.log('The Read File operation has failed.')\r\n          break;\r\n        }\r\n        if (readOpResult.status === STATUS_SUCCEEDED) {\r\n          console.log('The Read File operation was a success.');\r\n          console.log();\r\n          console.log('Read File local image result:');\r\n          for (const textRecResult of readOpResult.analyzeResult.readResults) {\r\n            for (const line of textRecResult.lines) {\r\n              if(regex.test(line.text))\r\n              {\r\n                  urlList.push(line.text);\r\n              }\r\n              else{\r\n                  nonUrlList.push(line.text);\r\n              }\r\n            }\r\n          }\r\n          console.log(\"Urls in the text\");\r\n          urlList.forEach(function(entry)\r\n          {\r\n              console.log(entry);\r\n          }\r\n          )\r\n          console.log(\"\\n\");\r\n          console.log(\"Text in the images\");\r\n          nonUrlList.forEach(function(entry)\r\n          {\r\n          console.log(entry);\r\n          }\r\n          )\r\n          break;\r\n        }\r\n        await sleep(1000);\r\n      }\r\n\r\n\r\n        \r\n\r\n    let result = await client.read(url);\r\n    let operationID = result.operationLocation.split('/').slice(-1)[0];\r\n\r\n    // Wait for read recognition to complete\r\n    // result.status is initially undefined, since it's the result of read\r\n    const start = Date.now();\r\n    console.log(`${start} -${result?.status} `);\r\n    \r\n    while (result.status !== \"succeeded\") {\r\n        await wait(500);\r\n        console.log(`${Date.now() - start} -${result?.status} `);\r\n        result = await client.getReadResult(operationID);\r\n    }\r\n    \r\n    // Return the first page of result. \r\n    // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\r\n    return result.analyzeResult; \r\n}"]},"metadata":{},"sourceType":"module"}