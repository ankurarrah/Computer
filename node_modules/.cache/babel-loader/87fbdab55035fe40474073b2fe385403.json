{"ast":null,"code":"// ./src/azure-cognitiveservices-computervision.js\n// Azure SDK client libraries\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\nimport { ApiKeyCredentials } from '@azure/ms-rest-js'; // List of sample images to use in demo\n\nimport RandomImageUrl from './DefaultImages'; // Authentication requirements\n\nconst key = '35074228b393450690d5c9a4ac95c12b';\nconst endpoint = 'https://fhlcomputervison.cognitiveservices.azure.com/';\nconsole.log(`key = ${key}`);\nconsole.log(`endpoint = ${endpoint}`); // Cognitive service features\n\nconst visualFeatures = [\"ImageType\", \"Faces\", \"Adult\", \"Categories\", \"Color\", \"Tags\", \"Description\", \"Objects\", \"Brands\"];\nexport const isConfigured = () => {\n  const result = key && endpoint && key.length > 0 && endpoint.length > 0 ? true : false;\n  console.log(`key = ${key}`);\n  console.log(`endpoint = ${endpoint}`);\n  console.log(`ComputerVision isConfigured = ${result}`);\n  return result;\n}; // Computer Vision detected Printed Text\n\nconst includesText = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"text\";\n  });\n}; // Computer Vision detected Handwriting\n\n\nconst includesHandwriting = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"handwriting\";\n  });\n}; // Wait for text detection to succeed\n\n\nconst wait = timeout => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}; // Analyze Image from URL\n\n\nexport const computerVision = async url => {\n  async.series([async function () {\n    const printedTextSampleURL = 'https://moderatorsampleimages.blob.core.windows.net/samples/sample2.jpg';\n    const multiLingualTextURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/MultiLingual.png'; //const handwrittenTextURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/MultiPageHandwrittenForm.pdf'; \n\n    const handwrittenTextURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/handwritten_text.jpg';\n    const STATUS_SUCCEEDED = \"succeeded\";\n    const STATUS_FAILED = \"failed\";\n    const handwrittenImagePath = url;\n    console.log('\\Reading local image for text in ...', path.basename(handwrittenImagePath));\n    const streamResponse = await computerVisionClient.readInStream(() => createReadStream(handwrittenImagePath)).then(response => {\n      return response;\n    });\n    console.log(); // Get operation location from response, so you can get the operation ID.\n\n    const operationLocationLocal = streamResponse.operationLocation; // Get the operation ID at the end of the URL\n\n    const operationIdLocal = operationLocationLocal.substring(operationLocationLocal.lastIndexOf('/') + 1); // Wait for the read operation to finish, use the operationId to get the result.\n\n    while (true) {\n      const readOpResult = await computerVisionClient.getReadResult(operationIdLocal).then(result => {\n        return result;\n      });\n      console.log('Read status: ' + readOpResult.status);\n\n      if (readOpResult.status === STATUS_FAILED) {\n        console.log('The Read File operation has failed.');\n        break;\n      }\n\n      if (readOpResult.status === STATUS_SUCCEEDED) {\n        console.log('The Read File operation was a success.');\n        console.log();\n        console.log('Read File local image result:');\n\n        for (const textRecResult of readOpResult.analyzeResult.readResults) {\n          for (const line of textRecResult.lines) {\n            if (regex.test(line.text)) {\n              urlList.push(line.text);\n            } else {\n              nonUrlList.push(line.text);\n            }\n          }\n        }\n\n        console.log(\"Urls in the text\");\n        urlList.forEach(function (entry) {\n          console.log(entry);\n        });\n        console.log(\"\\n\");\n        console.log(\"Text in the images\");\n        nonUrlList.forEach(function (entry) {\n          console.log(entry);\n        });\n        break;\n      }\n\n      await sleep(1000);\n    }\n\n    console.log();\n  }, function () {\n    return new Promise(resolve => {\n      resolve();\n    });\n  }], err => {\n    throw err;\n  });\n}; // analyze text in image\n\nconst readTextFromURL = async (client, url) => {\n  var _result;\n\n  let result = await client.read(url);\n  let operationID = result.operationLocation.split('/').slice(-1)[0]; // Wait for read recognition to complete\n  // result.status is initially undefined, since it's the result of read\n\n  const start = Date.now();\n  console.log(`${start} -${(_result = result) === null || _result === void 0 ? void 0 : _result.status} `);\n\n  while (result.status !== \"succeeded\") {\n    var _result2;\n\n    await wait(500);\n    console.log(`${Date.now() - start} -${(_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.status} `);\n    result = await client.getReadResult(operationID);\n  } // Return the first page of result. \n  // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\n\n\n  return result.analyzeResult;\n};","map":{"version":3,"sources":["C:/Users/ankusin.FAREAST/source/repos/JavaScript_end_to_end_client_analyze_image_with_Cognitive_Services/src/azure-cognitiveservices-computervision.js"],"names":["ComputerVisionClient","ApiKeyCredentials","RandomImageUrl","key","endpoint","console","log","visualFeatures","isConfigured","result","length","includesText","tags","filter","el","name","toLowerCase","includesHandwriting","wait","timeout","Promise","resolve","setTimeout","computerVision","url","async","series","printedTextSampleURL","multiLingualTextURL","handwrittenTextURL","STATUS_SUCCEEDED","STATUS_FAILED","handwrittenImagePath","path","basename","streamResponse","computerVisionClient","readInStream","createReadStream","then","response","operationLocationLocal","operationLocation","operationIdLocal","substring","lastIndexOf","readOpResult","getReadResult","status","textRecResult","analyzeResult","readResults","line","lines","regex","test","text","urlList","push","nonUrlList","forEach","entry","sleep","err","readTextFromURL","client","read","operationID","split","slice","start","Date","now"],"mappings":"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","sourcesContent":["// ./src/azure-cognitiveservices-computervision.js\r\n\r\n// Azure SDK client libraries\r\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\r\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\r\n\r\n// List of sample images to use in demo\r\nimport RandomImageUrl from './DefaultImages';\r\n\r\n// Authentication requirements\r\nconst key = '35074228b393450690d5c9a4ac95c12b';\r\nconst endpoint = 'https://fhlcomputervison.cognitiveservices.azure.com/';\r\n\r\nconsole.log(`key = ${key}`)\r\nconsole.log(`endpoint = ${endpoint}`)\r\n\r\n// Cognitive service features\r\nconst visualFeatures = [\r\n    \"ImageType\",\r\n    \"Faces\",\r\n    \"Adult\",\r\n    \"Categories\",\r\n    \"Color\",\r\n    \"Tags\",\r\n    \"Description\",\r\n    \"Objects\",\r\n    \"Brands\"\r\n];\r\n\r\nexport const isConfigured = () => {\r\n    const result = (key && endpoint && (key.length > 0) && (endpoint.length > 0)) ? true : false;\r\n    console.log(`key = ${key}`)\r\n    console.log(`endpoint = ${endpoint}`)\r\n    console.log(`ComputerVision isConfigured = ${result}`)\r\n    return result;\r\n}\r\n\r\n// Computer Vision detected Printed Text\r\nconst includesText = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"text\";\r\n    });\r\n}\r\n// Computer Vision detected Handwriting\r\nconst includesHandwriting = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"handwriting\";\r\n    });\r\n}\r\n// Wait for text detection to succeed\r\nconst wait = (timeout) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, timeout);\r\n    });\r\n}\r\n\r\n// Analyze Image from URL\r\nexport const computerVision = async (url) => {\r\n    async.series([\r\n        async function () {\r\n      const printedTextSampleURL = 'https://moderatorsampleimages.blob.core.windows.net/samples/sample2.jpg';\r\n      const multiLingualTextURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/MultiLingual.png';\r\n      //const handwrittenTextURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/MultiPageHandwrittenForm.pdf'; \r\n      const handwrittenTextURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/handwritten_text.jpg';\r\n\r\n      const STATUS_SUCCEEDED = \"succeeded\";\r\n      const STATUS_FAILED = \"failed\";\r\n\r\n      const handwrittenImagePath = url;\r\n    console.log('\\Reading local image for text in ...', path.basename(handwrittenImagePath));\r\n    \r\n    const streamResponse = await computerVisionClient.readInStream(() => createReadStream(handwrittenImagePath))\r\n      .then((response) => {\r\n        return response;\r\n      });\r\n      console.log();\r\n      // Get operation location from response, so you can get the operation ID.\r\n      const operationLocationLocal = streamResponse.operationLocation\r\n      // Get the operation ID at the end of the URL\r\n      const operationIdLocal = operationLocationLocal.substring(operationLocationLocal.lastIndexOf('/') + 1);\r\n\r\n      // Wait for the read operation to finish, use the operationId to get the result.\r\n      while (true) {\r\n        const readOpResult = await computerVisionClient.getReadResult(operationIdLocal)\r\n          .then((result) => {\r\n            return result;\r\n          })\r\n        console.log('Read status: ' + readOpResult.status)\r\n        if (readOpResult.status === STATUS_FAILED) {\r\n          console.log('The Read File operation has failed.')\r\n          break;\r\n        }\r\n        if (readOpResult.status === STATUS_SUCCEEDED) {\r\n          console.log('The Read File operation was a success.');\r\n          console.log();\r\n          console.log('Read File local image result:');\r\n          for (const textRecResult of readOpResult.analyzeResult.readResults) {\r\n            for (const line of textRecResult.lines) {\r\n              if(regex.test(line.text))\r\n              {\r\n                  urlList.push(line.text);\r\n              }\r\n              else{\r\n                  nonUrlList.push(line.text);\r\n              }\r\n            }\r\n          }\r\n          console.log(\"Urls in the text\");\r\n          urlList.forEach(function(entry)\r\n          {\r\n              console.log(entry);\r\n          }\r\n          )\r\n          console.log(\"\\n\");\r\n          console.log(\"Text in the images\");\r\n          nonUrlList.forEach(function(entry)\r\n          {\r\n          console.log(entry);\r\n          }\r\n          )\r\n          break;\r\n        }\r\n        await sleep(1000);\r\n      }\r\n      console.log();\r\n  },\r\n      function () {\r\n        return new Promise((resolve) => {\r\n          resolve();\r\n        })\r\n      }\r\n    ], (err) => {\r\n      throw (err);\r\n    });\r\n}\r\n// analyze text in image\r\nconst readTextFromURL = async (client, url) => {\r\n    \r\n    let result = await client.read(url);\r\n    let operationID = result.operationLocation.split('/').slice(-1)[0];\r\n\r\n    // Wait for read recognition to complete\r\n    // result.status is initially undefined, since it's the result of read\r\n    const start = Date.now();\r\n    console.log(`${start} -${result?.status} `);\r\n    \r\n    while (result.status !== \"succeeded\") {\r\n        await wait(500);\r\n        console.log(`${Date.now() - start} -${result?.status} `);\r\n        result = await client.getReadResult(operationID);\r\n    }\r\n    \r\n    // Return the first page of result. \r\n    // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\r\n    return result.analyzeResult; \r\n}"]},"metadata":{},"sourceType":"module"}