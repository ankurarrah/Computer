{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\nvar StatusCodes = Constants.HttpConstants.StatusCodes;\nvar DEFAULT_RETRY_COUNT = 3;\nexport function throttlingRetryPolicy(maxRetries) {\n  if (maxRetries === void 0) {\n    maxRetries = DEFAULT_RETRY_COUNT;\n  }\n\n  return {\n    create: function (nextPolicy, options) {\n      return new ThrottlingRetryPolicy(nextPolicy, options, maxRetries);\n    }\n  };\n}\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\n\nvar ThrottlingRetryPolicy =\n/** @class */\nfunction (_super) {\n  __extends(ThrottlingRetryPolicy, _super);\n\n  function ThrottlingRetryPolicy(nextPolicy, options, retryLimit) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.retryLimit = retryLimit;\n    return _this;\n  }\n\n  ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {\n          return _this.retry(httpRequest, response, 0);\n        })];\n      });\n    });\n  };\n\n  ThrottlingRetryPolicy.prototype.retry = function (httpRequest, httpResponse, retryCount) {\n    return __awaiter(this, void 0, void 0, function () {\n      var retryAfterHeader, delayInMs, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (httpResponse.status !== StatusCodes.TooManyRequests) {\n              return [2\n              /*return*/\n              , httpResponse];\n            }\n\n            retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n            if (!(retryAfterHeader && retryCount < this.retryLimit)) return [3\n            /*break*/\n            , 3];\n            delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n            if (!delayInMs) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , delay(delayInMs)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this._nextPolicy.sendRequest(httpRequest)];\n\n          case 2:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , this.retry(httpRequest, res, retryCount + 1)];\n\n          case 3:\n            return [2\n            /*return*/\n            , httpResponse];\n        }\n      });\n    });\n  };\n\n  ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {\n    var retryAfterInSeconds = Number(headerValue);\n\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  };\n\n  ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {\n    try {\n      var now = Date.now();\n      var date = Date.parse(headerValue);\n      var diff = date - now;\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  };\n\n  return ThrottlingRetryPolicy;\n}(BaseRequestPolicy);\n\nexport { ThrottlingRetryPolicy };","map":{"version":3,"sources":["../../../lib/policies/throttlingRetryPolicy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { BaseRequestPolicy, } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\nvar StatusCodes = Constants.HttpConstants.StatusCodes;\nvar DEFAULT_RETRY_COUNT = 3;\nexport function throttlingRetryPolicy(maxRetries) {\n    if (maxRetries === void 0) { maxRetries = DEFAULT_RETRY_COUNT; }\n    return {\n        create: function (nextPolicy, options) {\n            return new ThrottlingRetryPolicy(nextPolicy, options, maxRetries);\n        },\n    };\n}\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nvar ThrottlingRetryPolicy = /** @class */ (function (_super) {\n    __extends(ThrottlingRetryPolicy, _super);\n    function ThrottlingRetryPolicy(nextPolicy, options, retryLimit) {\n        var _this = _super.call(this, nextPolicy, options) || this;\n        _this.retryLimit = retryLimit;\n        return _this;\n    }\n    ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {\n                        return _this.retry(httpRequest, response, 0);\n                    })];\n            });\n        });\n    };\n    ThrottlingRetryPolicy.prototype.retry = function (httpRequest, httpResponse, retryCount) {\n        return __awaiter(this, void 0, void 0, function () {\n            var retryAfterHeader, delayInMs, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (httpResponse.status !== StatusCodes.TooManyRequests) {\n                            return [2 /*return*/, httpResponse];\n                        }\n                        retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n                        if (!(retryAfterHeader && retryCount < this.retryLimit)) return [3 /*break*/, 3];\n                        delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n                        if (!delayInMs) return [3 /*break*/, 3];\n                        return [4 /*yield*/, delay(delayInMs)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this._nextPolicy.sendRequest(httpRequest)];\n                    case 2:\n                        res = _a.sent();\n                        return [2 /*return*/, this.retry(httpRequest, res, retryCount + 1)];\n                    case 3: return [2 /*return*/, httpResponse];\n                }\n            });\n        });\n    };\n    ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {\n        var retryAfterInSeconds = Number(headerValue);\n        if (Number.isNaN(retryAfterInSeconds)) {\n            return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n        }\n        else {\n            return retryAfterInSeconds * 1000;\n        }\n    };\n    ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {\n        try {\n            var now = Date.now();\n            var date = Date.parse(headerValue);\n            var diff = date - now;\n            return Number.isNaN(diff) ? undefined : diff;\n        }\n        catch (error) {\n            return undefined;\n        }\n    };\n    return ThrottlingRetryPolicy;\n}(BaseRequestPolicy));\nexport { ThrottlingRetryPolicy };\n//# sourceMappingURL=throttlingRetryPolicy.js.map"]},"metadata":{},"sourceType":"module"}