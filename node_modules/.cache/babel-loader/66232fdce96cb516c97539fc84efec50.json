{"ast":null,"code":"// ./src/azure-cognitiveservices-computervision.js\n// Azure SDK client libraries\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\nimport { ApiKeyCredentials } from '@azure/ms-rest-js'; // List of sample images to use in demo\n\nimport RandomImageUrl from './DefaultImages';\n\nconst fs = require('fs');\n\nconst https = require('https');\n\nconst path = require(\"path\");\n\nconst createReadStream = require('fs').createReadStream; // Authentication requirements\n\n\nconst key = '35074228b393450690d5c9a4ac95c12b';\nconst endpoint = 'https://fhlcomputervison.cognitiveservices.azure.com/';\nconst STATUS_SUCCEEDED = \"succeeded\";\nconst STATUS_FAILED = \"failed\";\n\nconst sleep = require('util').promisify(setTimeout);\n\nconst regex = new RegExp(/((?:(http|https|Http|Https|rtsp|Rtsp):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?((?:(?:[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}\\.)+(?:(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(?:biz|b[abdefghijmnorstvwyz])|(?:cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(?:edu|e[cegrstu])|f[ijkmor]|(?:gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(?:info|int|i[delmnoqrst])|(?:jobs|j[emop])|k[eghimnrwyz]|l[abcikrstuvy]|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])|(?:name|net|n[acefgilopruz])|(?:org|om)|(?:pro|p[aefghklmnrstwy])|qa|r[eouw]|s[abcdeghijklmnortuvyz]|(?:tel|travel|t[cdfghjklmnoprtvwz])|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]))|(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9])))(?:\\:\\d{1,5})?)(\\/(?:(?:[a-zA-Z0-9\\;\\/\\?\\:\\@\\&\\=\\#\\~\\-\\.\\+\\!\\*\\'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*)?(?:\\b|$)/);\nlet urlList = [];\nlet nonUrlList = [];\nconsole.log(`key = ${key}`);\nconsole.log(`endpoint = ${endpoint}`); // Cognitive service features\n\nconst visualFeatures = [\"ImageType\", \"Faces\", \"Adult\", \"Categories\", \"Color\", \"Tags\", \"Description\", \"Objects\", \"Brands\"];\nexport const isConfigured = () => {\n  const result = key && endpoint && key.length > 0 && endpoint.length > 0 ? true : false;\n  console.log(`key = ${key}`);\n  console.log(`endpoint = ${endpoint}`);\n  console.log(`ComputerVision isConfigured = ${result}`);\n  return result;\n}; // Computer Vision detected Printed Text\n\nconst includesText = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"text\";\n  });\n}; // Computer Vision detected Handwriting\n\n\nconst includesHandwriting = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"handwriting\";\n  });\n}; // Wait for text detection to succeed\n\n\nconst wait = timeout => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}; // Analyze Image from URL\n\n\nexport const computerVision = async url => {\n  // authenticate to Azure service\n  const computerVisionClient = new ComputerVisionClient(new ApiKeyCredentials({\n    inHeader: {\n      'Ocp-Apim-Subscription-Key': key\n    }\n  }), endpoint); // get image URL - entered in form or random from Default Images\n\n  const urlToAnalyze = url || RandomImageUrl(); // analyze image\n  // const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, { visualFeatures });\n  //// text detected - what does it say and where is it\n  //if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\n\n  analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze); //}\n  // all information about image\n\n  return {\n    \"URL\": urlToAnalyze,\n    ...analysis\n  };\n}; // analyze text in image\n\nconst readTextFromURL = async (client, url) => {\n  var _result;\n\n  const streamResponse = await client.readInStream(() => createReadStream(url)).then(response => {\n    return response;\n  });\n  console.log();\n  const operationLocationLocal = streamResponse.operationLocation;\n  const operationIdLocal = operationLocationLocal.substring(operationLocationLocal.lastIndexOf('/') + 1);\n\n  while (true) {\n    const readOpResult = await client.getReadResult(operationIdLocal).then(result => {\n      return result.analyzeResult;\n    });\n    console.log('Read status: ' + readOpResult.status);\n\n    if (readOpResult.status === STATUS_FAILED) {\n      console.log('The Read File operation has failed.');\n      break;\n    }\n\n    if (readOpResult.status === STATUS_SUCCEEDED) {\n      console.log('The Read File operation was a success.');\n      console.log();\n      console.log('Read File local image result:');\n\n      for (const textRecResult of readOpResult.analyzeResult.readResults) {\n        for (const line of textRecResult.lines) {\n          if (regex.test(line.text)) {\n            urlList.push(line.text);\n          } else {\n            nonUrlList.push(line.text);\n          }\n        }\n      }\n\n      console.log(\"Urls in the text\");\n      urlList.forEach(function (entry) {\n        console.log(entry);\n      });\n      break;\n    }\n\n    await sleep(1000);\n  }\n\n  let result = await client.read(url);\n  let operationID = result.operationLocation.split('/').slice(-1)[0]; // Wait for read recognition to complete\n  // result.status is initially undefined, since it's the result of read\n\n  const start = Date.now();\n  console.log(`${start} -${(_result = result) === null || _result === void 0 ? void 0 : _result.status} `);\n\n  while (result.status !== \"succeeded\") {\n    var _result2;\n\n    await wait(500);\n    console.log(`${Date.now() - start} -${(_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.status} `);\n    result = await client.getReadResult(operationID);\n  } // Return the first page of result. \n  // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\n\n\n  return result.analyzeResult;\n};","map":{"version":3,"sources":["C:/Users/ankusin.FAREAST/source/repos/JavaScript_end_to_end_client_analyze_image_with_Cognitive_Services/src/azure-cognitiveservices-computervision.js"],"names":["ComputerVisionClient","ApiKeyCredentials","RandomImageUrl","fs","require","https","path","createReadStream","key","endpoint","STATUS_SUCCEEDED","STATUS_FAILED","sleep","promisify","setTimeout","regex","RegExp","urlList","nonUrlList","console","log","visualFeatures","isConfigured","result","length","includesText","tags","filter","el","name","toLowerCase","includesHandwriting","wait","timeout","Promise","resolve","computerVision","url","computerVisionClient","inHeader","urlToAnalyze","analysis","text","readTextFromURL","client","streamResponse","readInStream","then","response","operationLocationLocal","operationLocation","operationIdLocal","substring","lastIndexOf","readOpResult","getReadResult","analyzeResult","status","textRecResult","readResults","line","lines","test","push","forEach","entry","read","operationID","split","slice","start","Date","now"],"mappings":"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","sourcesContent":["// ./src/azure-cognitiveservices-computervision.js\r\n\r\n// Azure SDK client libraries\r\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\r\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\r\n\r\n// List of sample images to use in demo\r\nimport RandomImageUrl from './DefaultImages';\r\nconst fs = require('fs');\r\nconst https = require('https');\r\nconst path = require(\"path\");\r\nconst createReadStream = require('fs').createReadStream;\r\n// Authentication requirements\r\nconst key = '35074228b393450690d5c9a4ac95c12b';\r\nconst endpoint = 'https://fhlcomputervison.cognitiveservices.azure.com/';\r\nconst STATUS_SUCCEEDED = \"succeeded\";\r\nconst STATUS_FAILED = \"failed\";\r\nconst sleep = require('util').promisify(setTimeout);\r\nconst regex= new RegExp(/((?:(http|https|Http|Https|rtsp|Rtsp):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?((?:(?:[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}\\.)+(?:(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(?:biz|b[abdefghijmnorstvwyz])|(?:cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(?:edu|e[cegrstu])|f[ijkmor]|(?:gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(?:info|int|i[delmnoqrst])|(?:jobs|j[emop])|k[eghimnrwyz]|l[abcikrstuvy]|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])|(?:name|net|n[acefgilopruz])|(?:org|om)|(?:pro|p[aefghklmnrstwy])|qa|r[eouw]|s[abcdeghijklmnortuvyz]|(?:tel|travel|t[cdfghjklmnoprtvwz])|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]))|(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9])))(?:\\:\\d{1,5})?)(\\/(?:(?:[a-zA-Z0-9\\;\\/\\?\\:\\@\\&\\=\\#\\~\\-\\.\\+\\!\\*\\'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*)?(?:\\b|$)/);\r\nlet urlList=[];\r\nlet nonUrlList=[];\r\n\r\nconsole.log(`key = ${key}`)\r\nconsole.log(`endpoint = ${endpoint}`)\r\n\r\n// Cognitive service features\r\nconst visualFeatures = [\r\n    \"ImageType\",\r\n    \"Faces\",\r\n    \"Adult\",\r\n    \"Categories\",\r\n    \"Color\",\r\n    \"Tags\",\r\n    \"Description\",\r\n    \"Objects\",\r\n    \"Brands\"\r\n];\r\n\r\nexport const isConfigured = () => {\r\n    const result = (key && endpoint && (key.length > 0) && (endpoint.length > 0)) ? true : false;\r\n    console.log(`key = ${key}`)\r\n    console.log(`endpoint = ${endpoint}`)\r\n    console.log(`ComputerVision isConfigured = ${result}`)\r\n    return result;\r\n}\r\n\r\n// Computer Vision detected Printed Text\r\nconst includesText = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"text\";\r\n    });\r\n}\r\n// Computer Vision detected Handwriting\r\nconst includesHandwriting = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"handwriting\";\r\n    });\r\n}\r\n// Wait for text detection to succeed\r\nconst wait = (timeout) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, timeout);\r\n    });\r\n}\r\n\r\n// Analyze Image from URL\r\nexport const computerVision = async (url) => {\r\n\r\n    // authenticate to Azure service\r\n    const computerVisionClient = new ComputerVisionClient(\r\n        new ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint);\r\n\r\n    // get image URL - entered in form or random from Default Images\r\n    const urlToAnalyze = url || RandomImageUrl();\r\n    \r\n    // analyze image\r\n   // const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, { visualFeatures });\r\n\r\n    //// text detected - what does it say and where is it\r\n    //if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\r\n        analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze);\r\n    //}\r\n\r\n    // all information about image\r\n    return { \"URL\": urlToAnalyze, ...analysis};\r\n}\r\n// analyze text in image\r\nconst readTextFromURL = async (client, url) => {\r\n    \r\n\r\n    const streamResponse = await client.readInStream(() => createReadStream(url))\r\n    .then((response) => {\r\n      return response;\r\n    });\r\n    console.log();\r\n  \r\n    const operationLocationLocal = streamResponse.operationLocation\r\n    const operationIdLocal = operationLocationLocal.substring(operationLocationLocal.lastIndexOf('/') + 1);\r\n    \r\n    while (true) {\r\n        const readOpResult = await client.getReadResult(operationIdLocal)\r\n          .then((result) => {\r\n            return result.analyzeResult;\r\n          })\r\n        console.log('Read status: ' + readOpResult.status)\r\n        if (readOpResult.status === STATUS_FAILED) {\r\n          console.log('The Read File operation has failed.')\r\n          break;\r\n        }\r\n        if (readOpResult.status === STATUS_SUCCEEDED) {\r\n          console.log('The Read File operation was a success.');\r\n          console.log();\r\n          console.log('Read File local image result:');\r\n          for (const textRecResult of readOpResult.analyzeResult.readResults) {\r\n            for (const line of textRecResult.lines) {\r\n              if(regex.test(line.text))\r\n              {\r\n                  urlList.push(line.text);\r\n              }\r\n              else{\r\n                  nonUrlList.push(line.text);\r\n              }\r\n            }\r\n          }\r\n          console.log(\"Urls in the text\");\r\n          urlList.forEach(function(entry)\r\n          {\r\n              console.log(entry);\r\n          }\r\n          )\r\n          \r\n          break;\r\n        }\r\n        await sleep(1000);\r\n      }\r\n\r\n\r\n        \r\n\r\n    let result = await client.read(url);\r\n    let operationID = result.operationLocation.split('/').slice(-1)[0];\r\n\r\n    // Wait for read recognition to complete\r\n    // result.status is initially undefined, since it's the result of read\r\n    const start = Date.now();\r\n    console.log(`${start} -${result?.status} `);\r\n    \r\n    while (result.status !== \"succeeded\") {\r\n        await wait(500);\r\n        console.log(`${Date.now() - start} -${result?.status} `);\r\n        result = await client.getReadResult(operationID);\r\n    }\r\n    \r\n    // Return the first page of result. \r\n    // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\r\n    return result.analyzeResult; \r\n}"]},"metadata":{},"sourceType":"module"}