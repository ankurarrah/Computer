{"ast":null,"code":"// ./src/azure-cognitiveservices-computervision.js\n// Azure SDK client libraries\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\nimport { ApiKeyCredentials } from '@azure/ms-rest-js'; // List of sample images to use in demo\n\nimport RandomImageUrl from './DefaultImages'; // Authentication requirements\n\nconst key = '35074228b393450690d5c9a4ac95c12b';\nconst endpoint = 'https://fhlcomputervison.cognitiveservices.azure.com/';\nconsole.log(`key = ${key}`);\nconsole.log(`endpoint = ${endpoint}`); // Cognitive service features\n\nconst visualFeatures = [\"Tags\"];\nexport const isConfigured = () => {\n  const result = key && endpoint && key.length > 0 && endpoint.length > 0 ? true : false;\n  console.log(`key = ${key}`);\n  console.log(`endpoint = ${endpoint}`);\n  console.log(`ComputerVision isConfigured = ${result}`);\n  return result;\n}; // Computer Vision detected Printed Text\n\nconst includesText = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"text\";\n  });\n}; // Computer Vision detected Handwriting\n\n\nconst includesHandwriting = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"handwriting\";\n  });\n}; // Wait for text detection to succeed\n\n\nconst wait = timeout => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}; // Analyze Image from URL\n\n\nexport const computerVision = async url => {\n  // authenticate to Azure service\n  const computerVisionClient = new ComputerVisionClient(new ApiKeyCredentials({\n    inHeader: {\n      'Ocp-Apim-Subscription-Key': key\n    }\n  }), endpoint); // get image URL - entered in form or random from Default Images\n\n  const urlToAnalyze = url || RandomImageUrl(); // analyze image\n\n  const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, {\n    visualFeatures\n  }); // text detected - what does it say and where is it\n\n  if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\n    analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze);\n  } // all information about image\n\n\n  return analysis.text;\n}; // analyze text in image\n\nconst readTextFromURL = async (client, url) => {\n  var _result;\n\n  let result = await client.read(url);\n  let operationID = result.operationLocation.split('/').slice(-1)[0]; // Wait for read recognition to complete\n  // result.status is initially undefined, since it's the result of read\n\n  const start = Date.now();\n  console.log(`${start} -${(_result = result) === null || _result === void 0 ? void 0 : _result.status} `);\n\n  while (result.status !== \"succeeded\") {\n    var _result2;\n\n    await wait(500);\n    console.log(`${Date.now() - start} -${(_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.status} `);\n    result = await client.getReadResult(operationID);\n  } // Return the first page of result. \n  // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\n\n\n  return result.analyzeResult.readResults[0].lines;\n};","map":{"version":3,"sources":["C:/Users/ankusin.FAREAST/source/repos/JavaScript_end_to_end_client_analyze_image_with_Cognitive_Services/src/azure-cognitiveservices-computervision.js"],"names":["ComputerVisionClient","ApiKeyCredentials","RandomImageUrl","key","endpoint","console","log","visualFeatures","isConfigured","result","length","includesText","tags","filter","el","name","toLowerCase","includesHandwriting","wait","timeout","Promise","resolve","setTimeout","computerVision","url","computerVisionClient","inHeader","urlToAnalyze","analysis","analyzeImage","text","readTextFromURL","client","read","operationID","operationLocation","split","slice","start","Date","now","status","getReadResult","analyzeResult","readResults","lines"],"mappings":"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","sourcesContent":["// ./src/azure-cognitiveservices-computervision.js\r\n\r\n// Azure SDK client libraries\r\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\r\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\r\n\r\n// List of sample images to use in demo\r\nimport RandomImageUrl from './DefaultImages';\r\n\r\n// Authentication requirements\r\nconst key = '35074228b393450690d5c9a4ac95c12b';\r\nconst endpoint = 'https://fhlcomputervison.cognitiveservices.azure.com/';\r\n\r\nconsole.log(`key = ${key}`)\r\nconsole.log(`endpoint = ${endpoint}`)\r\n\r\n// Cognitive service features\r\nconst visualFeatures = [\r\n    \"Tags\",\r\n  \r\n];\r\n\r\nexport const isConfigured = () => {\r\n    const result = (key && endpoint && (key.length > 0) && (endpoint.length > 0)) ? true : false;\r\n    console.log(`key = ${key}`)\r\n    console.log(`endpoint = ${endpoint}`)\r\n    console.log(`ComputerVision isConfigured = ${result}`)\r\n    return result;\r\n}\r\n\r\n// Computer Vision detected Printed Text\r\nconst includesText = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"text\";\r\n    });\r\n}\r\n// Computer Vision detected Handwriting\r\nconst includesHandwriting = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"handwriting\";\r\n    });\r\n}\r\n// Wait for text detection to succeed\r\nconst wait = (timeout) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, timeout);\r\n    });\r\n}\r\n\r\n// Analyze Image from URL\r\nexport const computerVision = async (url) => {\r\n\r\n    // authenticate to Azure service\r\n    const computerVisionClient = new ComputerVisionClient(\r\n        new ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint);\r\n\r\n    // get image URL - entered in form or random from Default Images\r\n    const urlToAnalyze = url || RandomImageUrl();\r\n    \r\n    // analyze image\r\n    const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, { visualFeatures });\r\n\r\n    // text detected - what does it say and where is it\r\n    if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\r\n        analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze);\r\n    }\r\n\r\n    // all information about image\r\n    return analysis.text;\r\n}\r\n// analyze text in image\r\nconst readTextFromURL = async (client, url) => {\r\n    \r\n    let result = await client.read(url);\r\n    let operationID = result.operationLocation.split('/').slice(-1)[0];\r\n\r\n    // Wait for read recognition to complete\r\n    // result.status is initially undefined, since it's the result of read\r\n    const start = Date.now();\r\n    console.log(`${start} -${result?.status} `);\r\n    \r\n    while (result.status !== \"succeeded\") {\r\n        await wait(500);\r\n        console.log(`${Date.now() - start} -${result?.status} `);\r\n        result = await client.getReadResult(operationID);\r\n    }\r\n    \r\n    // Return the first page of result. \r\n    // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\r\n    return result.analyzeResult.readResults[0].lines; \r\n}"]},"metadata":{},"sourceType":"module"}