{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __assign, __spreadArrays } from \"tslib\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { getPathStringFromParameter, getPathStringFromParameterPath } from \"./operationParameter\";\nimport { isStreamOperation } from \"./operationSpec\";\nimport { deserializationPolicy } from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport { userAgentPolicy, getDefaultUserAgentHeaderName, getDefaultUserAgentValue } from \"./policies/userAgentPolicy\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { RequestPolicyOptions } from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { MapperType } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport { isWebResourceLike, WebResource } from \"./webResource\";\nimport { agentPolicy } from \"./policies/agentPolicy\";\nimport { proxyPolicy, getDefaultProxySettings } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { AzureIdentityCredentialAdapter } from \"./credentials/azureIdentityTokenCredentialAdapter\";\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\n\nvar ServiceClient =\n/** @class */\nfunction () {\n  /**\n   * The ServiceClient constructor\n   * @constructor\n   * @param {ServiceClientCredentials} [credentials] The credentials object used for authentication.\n   * @param {ServiceClientOptions} [options] The service client options that govern the behavior of the client.\n   */\n  function ServiceClient(credentials, options) {\n    if (!options) {\n      options = {};\n    }\n\n    var serviceClientCredentials;\n\n    if (isTokenCredential(credentials)) {\n      serviceClientCredentials = new AzureIdentityCredentialAdapter(credentials);\n    } else {\n      serviceClientCredentials = credentials;\n    }\n\n    if (serviceClientCredentials && !serviceClientCredentials.signRequest) {\n      throw new Error(\"credentials argument needs to implement signRequest method\");\n    }\n\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || new DefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n    var requestPolicyFactories;\n\n    if (Array.isArray(options.requestPolicyFactories)) {\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      requestPolicyFactories = createDefaultRequestPolicyFactories(serviceClientCredentials, options);\n\n      if (options.requestPolicyFactories) {\n        var newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);\n\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n  /**\n   * Send the provided httpRequest.\n   */\n\n\n  ServiceClient.prototype.sendRequest = function (options) {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n\n    var httpRequest;\n\n    try {\n      if (isWebResourceLike(options)) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    var httpPipeline = this._httpClient;\n\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (var i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);\n      }\n    }\n\n    return httpPipeline.sendRequest(httpRequest);\n  };\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n   * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n   * @param {ServiceCallback} callback The callback to call when the response is received.\n   */\n\n\n  ServiceClient.prototype.sendOperationRequest = function (operationArguments, operationSpec, callback) {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n\n    var httpRequest = new WebResource();\n    var result;\n\n    try {\n      var baseUri = operationSpec.baseUrl || this.baseUri;\n\n      if (!baseUri) {\n        throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\");\n      }\n\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n      var requestUrl = URLBuilder.parse(baseUri);\n\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (var _i = 0, _a = operationSpec.urlParameters; _i < _a.length; _i++) {\n          var urlParameter = _a[_i];\n          var urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);\n          urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter));\n\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n\n          requestUrl.replaceAll(\"{\" + (urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)) + \"}\", urlParameterValue);\n        }\n      }\n\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (var _b = 0, _c = operationSpec.queryParameters; _b < _c.length; _b++) {\n          var queryParameter = _c[_b];\n          var queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);\n\n          if (queryParameterValue != undefined) {\n            queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n\n            if (queryParameter.collectionFormat != undefined) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  queryParameterValue = \"\";\n                } else {\n                  for (var index in queryParameterValue) {\n                    var item = queryParameterValue[index];\n                    queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                  }\n                }\n              } else if (queryParameter.collectionFormat === QueryCollectionFormat.Ssv || queryParameter.collectionFormat === QueryCollectionFormat.Tsv) {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (var index in queryParameterValue) {\n                  if (queryParameterValue[index] !== undefined && queryParameterValue[index] !== null) {\n                    queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                  }\n                }\n              } else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n\n            if (queryParameter.collectionFormat != undefined && queryParameter.collectionFormat !== QueryCollectionFormat.Multi && queryParameter.collectionFormat !== QueryCollectionFormat.Ssv && queryParameter.collectionFormat !== QueryCollectionFormat.Tsv) {\n              queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n            }\n\n            requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n          }\n        }\n      }\n\n      httpRequest.url = requestUrl.toString();\n      var contentType = operationSpec.contentType || this.requestContentType;\n\n      if (contentType) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n\n      if (operationSpec.headerParameters) {\n        for (var _d = 0, _e = operationSpec.headerParameters; _d < _e.length; _d++) {\n          var headerParameter = _e[_d];\n          var headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);\n\n          if (headerValue != undefined) {\n            headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n            var headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;\n\n            if (headerCollectionPrefix) {\n              for (var _f = 0, _g = Object.keys(headerValue); _f < _g.length; _f++) {\n                var key = _g[_f];\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n            }\n          }\n        }\n      }\n\n      var options = operationArguments.options;\n\n      if (options) {\n        if (options.customHeaders) {\n          for (var customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n      }\n\n      httpRequest.withCredentials = this._withCredentials;\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n\n      if (httpRequest.streamResponseBody == undefined) {\n        httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n      }\n\n      result = this.sendRequest(httpRequest).then(function (res) {\n        return flattenResponse(res, operationSpec.responses[res.status]);\n      });\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n\n    var cb = callback;\n\n    if (cb) {\n      result // tslint:disable-next-line:no-null-keyword\n      .then(function (res) {\n        return cb(null, res._response.parsedBody, res._response.request, res._response);\n      }).catch(function (err) {\n        return cb(err);\n      });\n    }\n\n    return result;\n  };\n\n  return ServiceClient;\n}();\n\nexport { ServiceClient };\nexport function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);\n    var bodyMapper = operationSpec.requestBody.mapper;\n    var required = bodyMapper.required,\n        xmlName = bodyMapper.xmlName,\n        xmlElementName = bodyMapper.xmlElementName,\n        serializedName = bodyMapper.serializedName;\n    var typeName = bodyMapper.type.name;\n\n    try {\n      if (httpRequest.body != undefined || required) {\n        var requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);\n        httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString);\n        var isStream = typeName === MapperType.Stream;\n\n        if (operationSpec.isXML) {\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(utils.prepareXMLRootList(httpRequest.body, xmlElementName || xmlName || serializedName), {\n              rootName: xmlName || serializedName\n            });\n          } else if (!isStream) {\n            httpRequest.body = stringifyXML(httpRequest.body, {\n              rootName: xmlName || serializedName\n            });\n          }\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(\"Error \\\"\" + error.message + \"\\\" occurred in serializing the payload - \" + JSON.stringify(serializedName, undefined, \"  \") + \".\");\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n\n    for (var _i = 0, _a = operationSpec.formDataParameters; _i < _a.length; _i++) {\n      var formDataParameter = _a[_i];\n      var formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);\n\n      if (formDataParameterValue != undefined) {\n        var formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter));\n      }\n    }\n  }\n}\n\nfunction isRequestPolicyFactory(instance) {\n  return typeof instance.create === \"function\";\n}\n\nfunction getValueOrFunctionResult(value, defaultValueCreator) {\n  var result;\n\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n\n  return result;\n}\n\nfunction createDefaultRequestPolicyFactories(credentials, options) {\n  var factories = [];\n\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n\n  if (credentials) {\n    if (isRequestPolicyFactory(credentials)) {\n      factories.push(credentials);\n    } else {\n      factories.push(signingPolicy(credentials));\n    }\n  }\n\n  var userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);\n  var userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);\n\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({\n      key: userAgentHeaderName,\n      value: userAgentHeaderValue\n    }));\n  }\n\n  factories.push(redirectPolicy());\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n  var proxySettings = options.proxySettings || getDefaultProxySettings();\n\n  if (proxySettings) {\n    factories.push(proxyPolicy(proxySettings));\n  }\n\n  if (options.agentSettings) {\n    factories.push(agentPolicy(options.agentSettings));\n  }\n\n  return factories;\n}\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\n\n\nexport function getPropertyParent(parent, propertyPath) {\n  if (parent && propertyPath) {\n    var propertyPathLength = propertyPath.length;\n\n    for (var i = 0; i < propertyPathLength - 1; ++i) {\n      var propertyName = propertyPath[i];\n\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n\n      parent = parent[propertyName];\n    }\n  }\n\n  return parent;\n}\n\nfunction getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer) {\n  return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);\n}\n\nexport function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer) {\n  var value;\n\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        var propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n\n        var useDefaultValue = false;\n\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue = parameterMapper.required || parameterPath[0] === \"options\" && parameterPath.length === 2;\n        }\n\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      } // Serialize just for validation purposes.\n\n\n      var parameterPathString = getPathStringFromParameterPath(parameterPath, parameterMapper);\n      serializer.serialize(parameterMapper, value, parameterPathString);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (var propertyName in parameterPath) {\n      var propertyMapper = parameterMapper.type.modelProperties[propertyName];\n      var propertyPath = parameterPath[propertyName];\n      var propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer); // Serialize just for validation purposes.\n\n      var propertyPathString = getPathStringFromParameterPath(propertyPath, propertyMapper);\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n  var result = {\n    propertyFound: false\n  };\n  var i = 0;\n\n  for (; i < parameterPath.length; ++i) {\n    var parameterPathPart = parameterPath[i]; // Make sure to check inherited properties too, so don't use hasOwnProperty().\n\n    if (parent != undefined && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n\n  return result;\n}\n\nexport function flattenResponse(_response, responseSpec) {\n  var parsedHeaders = _response.parsedHeaders;\n  var bodyMapper = responseSpec && responseSpec.bodyMapper;\n\n  var addOperationResponse = function (obj) {\n    return Object.defineProperty(obj, \"_response\", {\n      value: _response\n    });\n  };\n\n  if (bodyMapper) {\n    var typeName = bodyMapper.type.name;\n\n    if (typeName === \"Stream\") {\n      return addOperationResponse(__assign(__assign({}, parsedHeaders), {\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody\n      }));\n    }\n\n    var modelProperties_1 = typeName === \"Composite\" && bodyMapper.type.modelProperties || {};\n    var isPageableResponse = Object.keys(modelProperties_1).some(function (k) {\n      return modelProperties_1[k].serializedName === \"\";\n    });\n\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      // We're expecting a sequece(array) make sure that the response body is in the\n      // correct format, if not make it an empty array []\n      var parsedBody = Array.isArray(_response.parsedBody) ? _response.parsedBody : [];\n\n      var arrayResponse = __spreadArrays(parsedBody);\n\n      for (var _i = 0, _a = Object.keys(modelProperties_1); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        if (modelProperties_1[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n\n      if (parsedHeaders) {\n        for (var _b = 0, _c = Object.keys(parsedHeaders); _b < _c.length; _b++) {\n          var key = _c[_b];\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse(__assign(__assign({}, parsedHeaders), _response.parsedBody));\n    }\n  }\n\n  if (bodyMapper || _response.request.method === \"HEAD\" || utils.isPrimitiveType(_response.parsedBody)) {\n    // primitive body types and HEAD booleans\n    return addOperationResponse(__assign(__assign({}, parsedHeaders), {\n      body: _response.parsedBody\n    }));\n  }\n\n  return addOperationResponse(__assign(__assign({}, parsedHeaders), _response.parsedBody));\n}","map":{"version":3,"sources":["../../lib/serviceClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __assign, __spreadArrays } from \"tslib\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { getPathStringFromParameter, getPathStringFromParameterPath, } from \"./operationParameter\";\nimport { isStreamOperation } from \"./operationSpec\";\nimport { deserializationPolicy, } from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport { userAgentPolicy, getDefaultUserAgentHeaderName, getDefaultUserAgentValue, } from \"./policies/userAgentPolicy\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { RequestPolicyOptions, } from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { MapperType } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport { isWebResourceLike, WebResource, } from \"./webResource\";\nimport { agentPolicy } from \"./policies/agentPolicy\";\nimport { proxyPolicy, getDefaultProxySettings } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { AzureIdentityCredentialAdapter } from \"./credentials/azureIdentityTokenCredentialAdapter\";\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\nvar ServiceClient = /** @class */ (function () {\n    /**\n     * The ServiceClient constructor\n     * @constructor\n     * @param {ServiceClientCredentials} [credentials] The credentials object used for authentication.\n     * @param {ServiceClientOptions} [options] The service client options that govern the behavior of the client.\n     */\n    function ServiceClient(credentials, options) {\n        if (!options) {\n            options = {};\n        }\n        var serviceClientCredentials;\n        if (isTokenCredential(credentials)) {\n            serviceClientCredentials = new AzureIdentityCredentialAdapter(credentials);\n        }\n        else {\n            serviceClientCredentials = credentials;\n        }\n        if (serviceClientCredentials && !serviceClientCredentials.signRequest) {\n            throw new Error(\"credentials argument needs to implement signRequest method\");\n        }\n        this._withCredentials = options.withCredentials || false;\n        this._httpClient = options.httpClient || new DefaultHttpClient();\n        this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n        var requestPolicyFactories;\n        if (Array.isArray(options.requestPolicyFactories)) {\n            requestPolicyFactories = options.requestPolicyFactories;\n        }\n        else {\n            requestPolicyFactories = createDefaultRequestPolicyFactories(serviceClientCredentials, options);\n            if (options.requestPolicyFactories) {\n                var newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);\n                if (newRequestPolicyFactories) {\n                    requestPolicyFactories = newRequestPolicyFactories;\n                }\n            }\n        }\n        this._requestPolicyFactories = requestPolicyFactories;\n    }\n    /**\n     * Send the provided httpRequest.\n     */\n    ServiceClient.prototype.sendRequest = function (options) {\n        if (options === null || options === undefined || typeof options !== \"object\") {\n            throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n        }\n        var httpRequest;\n        try {\n            if (isWebResourceLike(options)) {\n                options.validateRequestProperties();\n                httpRequest = options;\n            }\n            else {\n                httpRequest = new WebResource();\n                httpRequest = httpRequest.prepare(options);\n            }\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n        var httpPipeline = this._httpClient;\n        if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n            for (var i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n                httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);\n            }\n        }\n        return httpPipeline.sendRequest(httpRequest);\n    };\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n     * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n     * @param {ServiceCallback} callback The callback to call when the response is received.\n     */\n    ServiceClient.prototype.sendOperationRequest = function (operationArguments, operationSpec, callback) {\n        if (typeof operationArguments.options === \"function\") {\n            callback = operationArguments.options;\n            operationArguments.options = undefined;\n        }\n        var httpRequest = new WebResource();\n        var result;\n        try {\n            var baseUri = operationSpec.baseUrl || this.baseUri;\n            if (!baseUri) {\n                throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\");\n            }\n            httpRequest.method = operationSpec.httpMethod;\n            httpRequest.operationSpec = operationSpec;\n            var requestUrl = URLBuilder.parse(baseUri);\n            if (operationSpec.path) {\n                requestUrl.appendPath(operationSpec.path);\n            }\n            if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n                for (var _i = 0, _a = operationSpec.urlParameters; _i < _a.length; _i++) {\n                    var urlParameter = _a[_i];\n                    var urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);\n                    urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter));\n                    if (!urlParameter.skipEncoding) {\n                        urlParameterValue = encodeURIComponent(urlParameterValue);\n                    }\n                    requestUrl.replaceAll(\"{\" + (urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)) + \"}\", urlParameterValue);\n                }\n            }\n            if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n                for (var _b = 0, _c = operationSpec.queryParameters; _b < _c.length; _b++) {\n                    var queryParameter = _c[_b];\n                    var queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);\n                    if (queryParameterValue != undefined) {\n                        queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n                        if (queryParameter.collectionFormat != undefined) {\n                            if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                                if (queryParameterValue.length === 0) {\n                                    queryParameterValue = \"\";\n                                }\n                                else {\n                                    for (var index in queryParameterValue) {\n                                        var item = queryParameterValue[index];\n                                        queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                                    }\n                                }\n                            }\n                            else if (queryParameter.collectionFormat === QueryCollectionFormat.Ssv ||\n                                queryParameter.collectionFormat === QueryCollectionFormat.Tsv) {\n                                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n                            }\n                        }\n                        if (!queryParameter.skipEncoding) {\n                            if (Array.isArray(queryParameterValue)) {\n                                for (var index in queryParameterValue) {\n                                    if (queryParameterValue[index] !== undefined &&\n                                        queryParameterValue[index] !== null) {\n                                        queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                                    }\n                                }\n                            }\n                            else {\n                                queryParameterValue = encodeURIComponent(queryParameterValue);\n                            }\n                        }\n                        if (queryParameter.collectionFormat != undefined &&\n                            queryParameter.collectionFormat !== QueryCollectionFormat.Multi &&\n                            queryParameter.collectionFormat !== QueryCollectionFormat.Ssv &&\n                            queryParameter.collectionFormat !== QueryCollectionFormat.Tsv) {\n                            queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n                        }\n                        requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n                    }\n                }\n            }\n            httpRequest.url = requestUrl.toString();\n            var contentType = operationSpec.contentType || this.requestContentType;\n            if (contentType) {\n                httpRequest.headers.set(\"Content-Type\", contentType);\n            }\n            if (operationSpec.headerParameters) {\n                for (var _d = 0, _e = operationSpec.headerParameters; _d < _e.length; _d++) {\n                    var headerParameter = _e[_d];\n                    var headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);\n                    if (headerValue != undefined) {\n                        headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n                        var headerCollectionPrefix = headerParameter.mapper\n                            .headerCollectionPrefix;\n                        if (headerCollectionPrefix) {\n                            for (var _f = 0, _g = Object.keys(headerValue); _f < _g.length; _f++) {\n                                var key = _g[_f];\n                                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                            }\n                        }\n                        else {\n                            httpRequest.headers.set(headerParameter.mapper.serializedName ||\n                                getPathStringFromParameter(headerParameter), headerValue);\n                        }\n                    }\n                }\n            }\n            var options = operationArguments.options;\n            if (options) {\n                if (options.customHeaders) {\n                    for (var customHeaderName in options.customHeaders) {\n                        httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n                    }\n                }\n                if (options.abortSignal) {\n                    httpRequest.abortSignal = options.abortSignal;\n                }\n                if (options.timeout) {\n                    httpRequest.timeout = options.timeout;\n                }\n                if (options.onUploadProgress) {\n                    httpRequest.onUploadProgress = options.onUploadProgress;\n                }\n                if (options.onDownloadProgress) {\n                    httpRequest.onDownloadProgress = options.onDownloadProgress;\n                }\n            }\n            httpRequest.withCredentials = this._withCredentials;\n            serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n            if (httpRequest.streamResponseBody == undefined) {\n                httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n            }\n            result = this.sendRequest(httpRequest).then(function (res) {\n                return flattenResponse(res, operationSpec.responses[res.status]);\n            });\n        }\n        catch (error) {\n            result = Promise.reject(error);\n        }\n        var cb = callback;\n        if (cb) {\n            result\n                // tslint:disable-next-line:no-null-keyword\n                .then(function (res) { return cb(null, res._response.parsedBody, res._response.request, res._response); })\n                .catch(function (err) { return cb(err); });\n        }\n        return result;\n    };\n    return ServiceClient;\n}());\nexport { ServiceClient };\nexport function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);\n        var bodyMapper = operationSpec.requestBody.mapper;\n        var required = bodyMapper.required, xmlName = bodyMapper.xmlName, xmlElementName = bodyMapper.xmlElementName, serializedName = bodyMapper.serializedName;\n        var typeName = bodyMapper.type.name;\n        try {\n            if (httpRequest.body != undefined || required) {\n                var requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);\n                httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString);\n                var isStream = typeName === MapperType.Stream;\n                if (operationSpec.isXML) {\n                    if (typeName === MapperType.Sequence) {\n                        httpRequest.body = stringifyXML(utils.prepareXMLRootList(httpRequest.body, xmlElementName || xmlName || serializedName), { rootName: xmlName || serializedName });\n                    }\n                    else if (!isStream) {\n                        httpRequest.body = stringifyXML(httpRequest.body, {\n                            rootName: xmlName || serializedName,\n                        });\n                    }\n                }\n                else if (!isStream) {\n                    httpRequest.body = JSON.stringify(httpRequest.body);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(\"Error \\\"\" + error.message + \"\\\" occurred in serializing the payload - \" + JSON.stringify(serializedName, undefined, \"  \") + \".\");\n        }\n    }\n    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        httpRequest.formData = {};\n        for (var _i = 0, _a = operationSpec.formDataParameters; _i < _a.length; _i++) {\n            var formDataParameter = _a[_i];\n            var formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);\n            if (formDataParameterValue != undefined) {\n                var formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n                httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter));\n            }\n        }\n    }\n}\nfunction isRequestPolicyFactory(instance) {\n    return typeof instance.create === \"function\";\n}\nfunction getValueOrFunctionResult(value, defaultValueCreator) {\n    var result;\n    if (typeof value === \"string\") {\n        result = value;\n    }\n    else {\n        result = defaultValueCreator();\n        if (typeof value === \"function\") {\n            result = value(result);\n        }\n    }\n    return result;\n}\nfunction createDefaultRequestPolicyFactories(credentials, options) {\n    var factories = [];\n    if (options.generateClientRequestIdHeader) {\n        factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n    }\n    if (credentials) {\n        if (isRequestPolicyFactory(credentials)) {\n            factories.push(credentials);\n        }\n        else {\n            factories.push(signingPolicy(credentials));\n        }\n    }\n    var userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);\n    var userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);\n    if (userAgentHeaderName && userAgentHeaderValue) {\n        factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));\n    }\n    factories.push(redirectPolicy());\n    factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n    if (!options.noRetryPolicy) {\n        factories.push(exponentialRetryPolicy());\n        factories.push(systemErrorRetryPolicy());\n        factories.push(throttlingRetryPolicy());\n    }\n    factories.push(deserializationPolicy(options.deserializationContentTypes));\n    var proxySettings = options.proxySettings || getDefaultProxySettings();\n    if (proxySettings) {\n        factories.push(proxyPolicy(proxySettings));\n    }\n    if (options.agentSettings) {\n        factories.push(agentPolicy(options.agentSettings));\n    }\n    return factories;\n}\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent, propertyPath) {\n    if (parent && propertyPath) {\n        var propertyPathLength = propertyPath.length;\n        for (var i = 0; i < propertyPathLength - 1; ++i) {\n            var propertyName = propertyPath[i];\n            if (!parent[propertyName]) {\n                parent[propertyName] = {};\n            }\n            parent = parent[propertyName];\n        }\n    }\n    return parent;\n}\nfunction getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer) {\n    return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);\n}\nexport function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer) {\n    var value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                var propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound) {\n                    propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n                }\n                var useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n            // Serialize just for validation purposes.\n            var parameterPathString = getPathStringFromParameterPath(parameterPath, parameterMapper);\n            serializer.serialize(parameterMapper, value, parameterPathString);\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (var propertyName in parameterPath) {\n            var propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            var propertyPath = parameterPath[propertyName];\n            var propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);\n            // Serialize just for validation purposes.\n            var propertyPathString = getPathStringFromParameterPath(propertyPath, propertyMapper);\n            serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    var result = { propertyFound: false };\n    var i = 0;\n    for (; i < parameterPath.length; ++i) {\n        var parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent != undefined && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nexport function flattenResponse(_response, responseSpec) {\n    var parsedHeaders = _response.parsedHeaders;\n    var bodyMapper = responseSpec && responseSpec.bodyMapper;\n    var addOperationResponse = function (obj) {\n        return Object.defineProperty(obj, \"_response\", {\n            value: _response,\n        });\n    };\n    if (bodyMapper) {\n        var typeName = bodyMapper.type.name;\n        if (typeName === \"Stream\") {\n            return addOperationResponse(__assign(__assign({}, parsedHeaders), { blobBody: _response.blobBody, readableStreamBody: _response.readableStreamBody }));\n        }\n        var modelProperties_1 = (typeName === \"Composite\" && bodyMapper.type.modelProperties) || {};\n        var isPageableResponse = Object.keys(modelProperties_1).some(function (k) { return modelProperties_1[k].serializedName === \"\"; });\n        if (typeName === \"Sequence\" || isPageableResponse) {\n            // We're expecting a sequece(array) make sure that the response body is in the\n            // correct format, if not make it an empty array []\n            var parsedBody = Array.isArray(_response.parsedBody) ? _response.parsedBody : [];\n            var arrayResponse = __spreadArrays(parsedBody);\n            for (var _i = 0, _a = Object.keys(modelProperties_1); _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (modelProperties_1[key].serializedName) {\n                    arrayResponse[key] = _response.parsedBody[key];\n                }\n            }\n            if (parsedHeaders) {\n                for (var _b = 0, _c = Object.keys(parsedHeaders); _b < _c.length; _b++) {\n                    var key = _c[_b];\n                    arrayResponse[key] = parsedHeaders[key];\n                }\n            }\n            addOperationResponse(arrayResponse);\n            return arrayResponse;\n        }\n        if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n            return addOperationResponse(__assign(__assign({}, parsedHeaders), _response.parsedBody));\n        }\n    }\n    if (bodyMapper ||\n        _response.request.method === \"HEAD\" ||\n        utils.isPrimitiveType(_response.parsedBody)) {\n        // primitive body types and HEAD booleans\n        return addOperationResponse(__assign(__assign({}, parsedHeaders), { body: _response.parsedBody }));\n    }\n    return addOperationResponse(__assign(__assign({}, parsedHeaders), _response.parsedBody));\n}\n//# sourceMappingURL=serviceClient.js.map"]},"metadata":{},"sourceType":"module"}