{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { MapperType } from \"../serializer\";\nimport * as utils from \"../util/utils\";\nimport { parseXML } from \"../util/xml\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\n\nexport function deserializationPolicy(deserializationContentTypes) {\n  return {\n    create: function (nextPolicy, options) {\n      return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n    }\n  };\n}\nexport var defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport var defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\n\nvar DeserializationPolicy =\n/** @class */\nfunction (_super) {\n  __extends(DeserializationPolicy, _super);\n\n  function DeserializationPolicy(nextPolicy, deserializationContentTypes, options) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    _this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n    return _this;\n  }\n\n  DeserializationPolicy.prototype.sendRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._nextPolicy.sendRequest(request).then(function (response) {\n          return deserializeResponseBody(_this.jsonContentTypes, _this.xmlContentTypes, response);\n        })];\n      });\n    });\n  };\n\n  return DeserializationPolicy;\n}(BaseRequestPolicy);\n\nexport { DeserializationPolicy };\n\nfunction getOperationResponse(parsedResponse) {\n  var result;\n  var request = parsedResponse.request;\n  var operationSpec = request.operationSpec;\n\n  if (operationSpec) {\n    var operationResponseGetter = request.operationResponseGetter;\n\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse) {\n  var shouldDeserialize = parsedResponse.request.shouldDeserialize;\n  var result;\n\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n\n  return result;\n}\n\nexport function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response) {\n  return parse(jsonContentTypes, xmlContentTypes, response).then(function (parsedResponse) {\n    var shouldDeserialize = shouldDeserializeResponse(parsedResponse);\n\n    if (shouldDeserialize) {\n      var operationSpec = parsedResponse.request.operationSpec;\n\n      if (operationSpec && operationSpec.responses) {\n        var statusCode = parsedResponse.status;\n        var expectedStatusCodes = Object.keys(operationSpec.responses);\n        var hasNoExpectedStatusCodes = expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\";\n        var responseSpec = getOperationResponse(parsedResponse);\n        var isExpectedStatusCode = hasNoExpectedStatusCodes ? 200 <= statusCode && statusCode < 300 : !!responseSpec;\n\n        if (!isExpectedStatusCode) {\n          var defaultResponseSpec = operationSpec.responses.default;\n\n          if (defaultResponseSpec) {\n            var initialErrorMessage = isStreamOperation(operationSpec) ? \"Unexpected status code: \" + statusCode : parsedResponse.bodyAsText;\n            var error = new RestError(initialErrorMessage);\n            error.statusCode = statusCode;\n            error.request = utils.stripRequest(parsedResponse.request);\n            error.response = utils.stripResponse(parsedResponse);\n            var parsedErrorResponse = parsedResponse.parsedBody;\n\n            try {\n              if (parsedErrorResponse) {\n                var defaultResponseBodyMapper = defaultResponseSpec.bodyMapper;\n\n                if (defaultResponseBodyMapper && defaultResponseBodyMapper.serializedName === \"CloudError\") {\n                  if (parsedErrorResponse.error) {\n                    parsedErrorResponse = parsedErrorResponse.error;\n                  }\n\n                  if (parsedErrorResponse.code) {\n                    error.code = parsedErrorResponse.code;\n                  }\n\n                  if (parsedErrorResponse.message) {\n                    error.message = parsedErrorResponse.message;\n                  }\n                } else {\n                  var internalError = parsedErrorResponse;\n\n                  if (parsedErrorResponse.error) {\n                    internalError = parsedErrorResponse.error;\n                  }\n\n                  error.code = internalError.code;\n\n                  if (internalError.message) {\n                    error.message = internalError.message;\n                  }\n                }\n\n                if (defaultResponseBodyMapper) {\n                  var valueToDeserialize = parsedErrorResponse;\n\n                  if (operationSpec.isXML && defaultResponseBodyMapper.type.name === MapperType.Sequence) {\n                    valueToDeserialize = typeof parsedErrorResponse === \"object\" ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName] : [];\n                  }\n\n                  error.body = operationSpec.serializer.deserialize(defaultResponseBodyMapper, valueToDeserialize, \"error.body\");\n                }\n              }\n            } catch (defaultError) {\n              error.message = \"Error \\\"\" + defaultError.message + \"\\\" occurred in deserializing the responseBody - \\\"\" + parsedResponse.bodyAsText + \"\\\" for the default response.\";\n            }\n\n            return Promise.reject(error);\n          }\n        } else if (responseSpec) {\n          if (responseSpec.bodyMapper) {\n            var valueToDeserialize = parsedResponse.parsedBody;\n\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n              valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];\n            }\n\n            try {\n              parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\");\n            } catch (error) {\n              var restError = new RestError(\"Error \" + error + \" occurred in deserializing the responseBody - \" + parsedResponse.bodyAsText);\n              restError.request = utils.stripRequest(parsedResponse.request);\n              restError.response = utils.stripResponse(parsedResponse);\n              return Promise.reject(restError);\n            }\n          } else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n          }\n\n          if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), \"operationRes.parsedHeaders\");\n          }\n        }\n      }\n    }\n\n    return Promise.resolve(parsedResponse);\n  });\n}\n\nfunction parse(jsonContentTypes, xmlContentTypes, operationResponse) {\n  var errorHandler = function (err) {\n    var msg = \"Error \\\"\" + err + \"\\\" occurred while parsing the response body - \" + operationResponse.bodyAsText + \".\";\n    var errCode = err.code || RestError.PARSE_ERROR;\n    var e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse, operationResponse.bodyAsText);\n    return Promise.reject(e);\n  };\n\n  if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n    var text_1 = operationResponse.bodyAsText;\n    var contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n    var contentComponents = !contentType ? [] : contentType.split(\";\").map(function (component) {\n      return component.toLowerCase();\n    });\n\n    if (contentComponents.length === 0 || contentComponents.some(function (component) {\n      return jsonContentTypes.indexOf(component) !== -1;\n    })) {\n      return new Promise(function (resolve) {\n        operationResponse.parsedBody = JSON.parse(text_1);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(function (component) {\n      return xmlContentTypes.indexOf(component) !== -1;\n    })) {\n      return parseXML(text_1).then(function (body) {\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }).catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}","map":{"version":3,"sources":["../../../lib/policies/deserializationPolicy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { MapperType } from \"../serializer\";\nimport * as utils from \"../util/utils\";\nimport { parseXML } from \"../util/xml\";\nimport { BaseRequestPolicy, } from \"./requestPolicy\";\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(deserializationContentTypes) {\n    return {\n        create: function (nextPolicy, options) {\n            return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n        },\n    };\n}\nexport var defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport var defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nvar DeserializationPolicy = /** @class */ (function (_super) {\n    __extends(DeserializationPolicy, _super);\n    function DeserializationPolicy(nextPolicy, deserializationContentTypes, options) {\n        var _this = _super.call(this, nextPolicy, options) || this;\n        _this.jsonContentTypes =\n            (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;\n        _this.xmlContentTypes =\n            (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;\n        return _this;\n    }\n    DeserializationPolicy.prototype.sendRequest = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._nextPolicy\n                        .sendRequest(request)\n                        .then(function (response) {\n                        return deserializeResponseBody(_this.jsonContentTypes, _this.xmlContentTypes, response);\n                    })];\n            });\n        });\n    };\n    return DeserializationPolicy;\n}(BaseRequestPolicy));\nexport { DeserializationPolicy };\nfunction getOperationResponse(parsedResponse) {\n    var result;\n    var request = parsedResponse.request;\n    var operationSpec = request.operationSpec;\n    if (operationSpec) {\n        var operationResponseGetter = request.operationResponseGetter;\n        if (!operationResponseGetter) {\n            result = operationSpec.responses[parsedResponse.status];\n        }\n        else {\n            result = operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    var shouldDeserialize = parsedResponse.request.shouldDeserialize;\n    var result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    }\n    else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    }\n    else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nexport function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response) {\n    return parse(jsonContentTypes, xmlContentTypes, response).then(function (parsedResponse) {\n        var shouldDeserialize = shouldDeserializeResponse(parsedResponse);\n        if (shouldDeserialize) {\n            var operationSpec = parsedResponse.request.operationSpec;\n            if (operationSpec && operationSpec.responses) {\n                var statusCode = parsedResponse.status;\n                var expectedStatusCodes = Object.keys(operationSpec.responses);\n                var hasNoExpectedStatusCodes = expectedStatusCodes.length === 0 ||\n                    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\");\n                var responseSpec = getOperationResponse(parsedResponse);\n                var isExpectedStatusCode = hasNoExpectedStatusCodes\n                    ? 200 <= statusCode && statusCode < 300\n                    : !!responseSpec;\n                if (!isExpectedStatusCode) {\n                    var defaultResponseSpec = operationSpec.responses.default;\n                    if (defaultResponseSpec) {\n                        var initialErrorMessage = isStreamOperation(operationSpec)\n                            ? \"Unexpected status code: \" + statusCode\n                            : parsedResponse.bodyAsText;\n                        var error = new RestError(initialErrorMessage);\n                        error.statusCode = statusCode;\n                        error.request = utils.stripRequest(parsedResponse.request);\n                        error.response = utils.stripResponse(parsedResponse);\n                        var parsedErrorResponse = parsedResponse.parsedBody;\n                        try {\n                            if (parsedErrorResponse) {\n                                var defaultResponseBodyMapper = defaultResponseSpec.bodyMapper;\n                                if (defaultResponseBodyMapper &&\n                                    defaultResponseBodyMapper.serializedName === \"CloudError\") {\n                                    if (parsedErrorResponse.error) {\n                                        parsedErrorResponse = parsedErrorResponse.error;\n                                    }\n                                    if (parsedErrorResponse.code) {\n                                        error.code = parsedErrorResponse.code;\n                                    }\n                                    if (parsedErrorResponse.message) {\n                                        error.message = parsedErrorResponse.message;\n                                    }\n                                }\n                                else {\n                                    var internalError = parsedErrorResponse;\n                                    if (parsedErrorResponse.error) {\n                                        internalError = parsedErrorResponse.error;\n                                    }\n                                    error.code = internalError.code;\n                                    if (internalError.message) {\n                                        error.message = internalError.message;\n                                    }\n                                }\n                                if (defaultResponseBodyMapper) {\n                                    var valueToDeserialize = parsedErrorResponse;\n                                    if (operationSpec.isXML &&\n                                        defaultResponseBodyMapper.type.name === MapperType.Sequence) {\n                                        valueToDeserialize =\n                                            typeof parsedErrorResponse === \"object\"\n                                                ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName]\n                                                : [];\n                                    }\n                                    error.body = operationSpec.serializer.deserialize(defaultResponseBodyMapper, valueToDeserialize, \"error.body\");\n                                }\n                            }\n                        }\n                        catch (defaultError) {\n                            error.message = \"Error \\\"\" + defaultError.message + \"\\\" occurred in deserializing the responseBody - \\\"\" + parsedResponse.bodyAsText + \"\\\" for the default response.\";\n                        }\n                        return Promise.reject(error);\n                    }\n                }\n                else if (responseSpec) {\n                    if (responseSpec.bodyMapper) {\n                        var valueToDeserialize = parsedResponse.parsedBody;\n                        if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n                            valueToDeserialize =\n                                typeof valueToDeserialize === \"object\"\n                                    ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]\n                                    : [];\n                        }\n                        try {\n                            parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\");\n                        }\n                        catch (error) {\n                            var restError = new RestError(\"Error \" + error + \" occurred in deserializing the responseBody - \" + parsedResponse.bodyAsText);\n                            restError.request = utils.stripRequest(parsedResponse.request);\n                            restError.response = utils.stripResponse(parsedResponse);\n                            return Promise.reject(restError);\n                        }\n                    }\n                    else if (operationSpec.httpMethod === \"HEAD\") {\n                        // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n                        parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n                    }\n                    if (responseSpec.headersMapper) {\n                        parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), \"operationRes.parsedHeaders\");\n                    }\n                }\n            }\n        }\n        return Promise.resolve(parsedResponse);\n    });\n}\nfunction parse(jsonContentTypes, xmlContentTypes, operationResponse) {\n    var errorHandler = function (err) {\n        var msg = \"Error \\\"\" + err + \"\\\" occurred while parsing the response body - \" + operationResponse.bodyAsText + \".\";\n        var errCode = err.code || RestError.PARSE_ERROR;\n        var e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse, operationResponse.bodyAsText);\n        return Promise.reject(e);\n    };\n    if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n        var text_1 = operationResponse.bodyAsText;\n        var contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n        var contentComponents = !contentType\n            ? []\n            : contentType.split(\";\").map(function (component) { return component.toLowerCase(); });\n        if (contentComponents.length === 0 ||\n            contentComponents.some(function (component) { return jsonContentTypes.indexOf(component) !== -1; })) {\n            return new Promise(function (resolve) {\n                operationResponse.parsedBody = JSON.parse(text_1);\n                resolve(operationResponse);\n            }).catch(errorHandler);\n        }\n        else if (contentComponents.some(function (component) { return xmlContentTypes.indexOf(component) !== -1; })) {\n            return parseXML(text_1)\n                .then(function (body) {\n                operationResponse.parsedBody = body;\n                return operationResponse;\n            })\n                .catch(errorHandler);\n        }\n    }\n    return Promise.resolve(operationResponse);\n}\n//# sourceMappingURL=deserializationPolicy.js.map"]},"metadata":{},"sourceType":"module"}